{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}

    <div class="two-col-layout2">

        <article class="article">

        <h1>Redovisningstexter</h1>
        <p>Skriven av Erke Håkansson, uppdaterad 2023-04-08.</p>

        <h2 id="kmom01">kmom01</h2>

        <p> Det var spännande att börja en ny kurs som handlar om objektorienterade webbteknologier som används i programmeringsspråket PHP. </p>
        <p> Har gått kursen grunderna i java innan, och dbwebb kurserna som python, oopython där lärde mig om objektorientering. </p>
        <p> Har förstått att objekt skapas utifrån ett klass, där klass fungerar som en template(mall eller kodstruktur) för ett objekt, för att klass innehåller funktioner(methoder) och variabler(properties). </p>
        <p> För att skapa klasser för objekt man måste kunna grunder om hur klassen byggs, exempelvis vilken typ properties ska bli, t. ex. sträng eller integer, hur de properties returneras i methoder, t. ex. med hjälp av $this. </p>

        <p> Filerna kommer från pakethanterare Composer, där med hjälp av command: "composer create-project symfony/website-skeleton projekt-namn" kommer projekt skeleton filerna, exempelvis mappen public, src, templates och filen composer.json som innehåller namn på paketen med versioner. </p>
        <p> När det gäller kodstrukturen som kommit med projekt skeleton tror att den viktigaste mappen är mappen public som kan innehålla viktiga filerna för att webbsidan ska fungera, t. ex. filen index.php med vendor autoload eller konfigurationsfil för Apache webserver .htaccess som lagts till. </p>
        <p> I mappen src finns mappen Controller som innehåller php filerna med controller klass som innehåller några methoder med route(URL) t. ex. /about eller /lucky, där #[Route (path)] kallas också PHP attributes(annotation routes) som är kopplat till en funktion(callback) som returnerar svaret med Response om de matchas. </p>
        <p> I mappen templates finns twig filerna som hjälper att rendera en webbsida, startsida är base.html.twig, där man kan inkludera path till några andra webbsidor, t. ex. about, report, med hjälp av feature "template inheritance" som extend den base template. </p>

        <p> Efter att man installerat Symfony tool Encore har det adderats mappen assets som hanterar css och javascript filerna, i assets finns mappen styles med css filen som behövs för att styla webbplatsen, assets körs sedan med command npm run build. </p>
        <p> Tänkte att det var lite svårt att förstå hur det fungerar i början, men att gå igenom övningen har hjälpt mycket att förstå Symfony kodbasen. </p>

        <p> I artikeln PHP the right way var det intressant att läsa om benefits av användning av templating och compiling med templatemotor Twig. Exempelvis var det intressant att veta att det är mest designers som använder templates och att med templates det är mycket lättare att organisera och hantera koden. </p>
        <p> De områdena i den artikeln som vill veta mer om är exempelvis Web Application Security och Databases. </p>

        <p> Min TIL är hur man installerar ramverket Symfony och sammanställer en webbplats med hjälp av det. </p>
        <p> Har också lärt att det finns design pattern MVC som är grunden för att bygga en webbplats, där M betyder Model, V är View, C är Controller som är en del av ramverket Symfony. </p>
        <p> Där kontroller är en PHP funktion som man skapar för att läsa information från Request objekt och skapa och returnera data med en Response objekt i form av exempelvis HTML sida eller JSON data. </p>
        <p> Templates as View används för att rendera webbsidor med hjälp av twig filerna i vilka man skriver HTML kod för webbsida. </p>
        <p> Har också uppdaterad mina kunskaper om hur man skapar ny repository och pushar, taggar filerna till Github. </p>
        <p> I helhet tycker att det var intessant att göra det första kursmomentet, har lärt mig massa nytt och repeterat HTML, PHP och CSS. </p>

        <h2 id="kmom02">kmom02</h2>
        <p> Det var både utmanande och intressant att göra kmom02.</p>
        <p> Objektorienterade konstruktionen arv är när subclass ärver alla properties och methods från basclass. Används genom nyckelordet "extends". </p>
        <p> Komposition som jag har förstått är när en klass använder(has-a) en annan klass. Beroende på hur stark relationen är mellan klasserna i komposition man kan urskilja en aggregat relation - när det är svag koppling mellan klasserna. </p>
        <p> Interface är en objektorienterad konstruktion som innehåller en eller flera public methoder utan variabler, används genom nyckelordet "interface" i php. När klass implementerar en interface, lovar det att använda alla interfaces methoder vid senare tillfälle. </p>
        <p> Trait är en kod som kan innehålla metoder och variabler som kan återanvändas i en eller flera klasser när den använder(use) trait. Till skillnad från klasser trait kan inte leva på egen hand, utan borde användas i klasser för att utöka deras funktionalitet. Används genom nyckelordet "trait" traitName och "use" traitName i php. </p>
        <p> Har skapat fyra klasser i src med arv och aggregat relation. </p>
        <p> Klass CardGraphic extends klass Card som är en arv relation. </p>
        <p> Klass CardHand använder klass CardGraphic och klass DeckOfCard i sina methoder för att shuffla kort from kortleken. </p>
        <p> Sedan har använt klass CardHand i card och json controllers genom att skapa ett nytt CardHand object </p>
        <p> Sedan har skapat två nya mappen card och api i templates, där skapade landningssidor med routes i, där skrivit ut $data variablerna från CardGame controllerns routes med bland annat for, endfor funktion i html.twig filen. </p>
        <p> Har sorterad spader, hjärter, ruter och klöver per färg och value med utf-8 tecken i app.css klass, för att visualisera i deck.html.twig filen. </p>
        <p> Tyckte att svåraste var att klura ut hur man kan dra ett antal kort från kortleken. Har löst det med hjälp av array_diff funktion och variabler sparade i session. </p>
        <p> Har löst Json api krav 5,6 genom att skapa html post formulär i api.html.twig file med länk till JsonApiControllers routes som har methods:['POST']. </p>
        <p> Är nöjd med min uppgift så länge, tror att det blivit bra, man kan nu shuffla hela kortlek och dra ett eller fem kort från kortleken. Det som kunde blivit bättre är att man kunde implementera html formuläret, för att användare kunde välja själv olika antal kort att dra ut från kortleken. </p>
        <p> Min TIL är hur man skapar och använder egna klasser i php, vad är arv, komposition, trait in php. </p>
        <p> Har också lärt mig om vad är session, hur man sparar data och använder den sparade data från session. </p>
        <p> Tycker att har förstått mycket bättre hur Symfony fungerar och hur koden struktureras i src/controllers (C:et i MVC) först och sedan data visas i html.twig filerna (V:et i MVC) enligt MVC. </p>
        <p> I helhet tyckte att det var rätt svårt uppgift, men mycket givande, för att har lärt mig mycket nytt om symfony, session och hur man skapar och använder klasser med objektorienterade konstruktionerna i php. </p>

        <h2 id="kmom03">kmom03</h2>

        <h2 id="kmom04">kmom04</h2>

        <h2 id="kmom05">kmom05</h2>

        <h2 id="kmom06">kmom06</h2>

        <h2 id="kmom10">kmom10</h2>

        </article>

        <aside class="report">

            <h4 style ="color:green;"> Innehållsförteckning </h4>
            
            <ul>
                <li><a href="#kmom01">kmom01</a></li>
                <li><a href="#kmom02">kmom02</a></li>
                <li><a href="#kmom03">kmom03</a></li>
                <li><a href="#kmom04">kmom04</a></li>
                <li><a href="#kmom05">kmom05</a></li>
                <li><a href="#kmom06">kmom06</a></li>
                <li><a href="#kmom10">kmom10</a></li>
            </ul>
            
        </aside>
    </div>

{% endblock %}
